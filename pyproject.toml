[build-system]
requires = ["setuptools>=45", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "pr-check-agent"
version = "0.1.0"
description = "LangGraph-based PR monitoring agent with automated issue fixing"
authors = [{name = "Federico", email = "federico@example.com"}]
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    # Core dependencies will be loaded from requirements.txt
]

[tool.ruff]
line-length = 127
target-version = "py313"

# Exclude a variety of commonly ignored directories
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
    "logs",
    "htmlcov",
]

[tool.ruff.lint]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "N",  # pep8-naming
    "D",  # pydocstyle
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "ANN", # flake8-annotations
    "S",  # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "COM", # flake8-commas
    "C4", # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "EM", # flake8-errmsg
    "EXE", # flake8-executable
    "FA", # flake8-future-annotations
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",  # flake8-logging-format
    "INP", # flake8-no-pep420
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT", # flake8-pytest-style
    "Q",  # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "INT", # flake8-gettext
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD", # flake8-todos
    "FIX", # flake8-fixme
    "ERA", # eradicate
    "PD", # pandas-vet
    "PGH", # pygrep-hooks
    "PL", # Pylint
    "TRY", # tryceratops
    "FLY", # flynt
    "NPY", # NumPy-specific rules
    "PERF", # Perflint
    "FURB", # refurb
    "LOG", # flake8-logging
    "RUF", # Ruff-specific rules
]

ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D102", # Missing docstring in public method
    "D103", # Missing docstring in public function
    "D104", # Missing docstring in public package
    "D105", # Missing docstring in magic method
    "COM812", # Trailing comma missing (conflicts with formatter)
    "ISC001", # Implicitly concatenated string literals (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**" = [
    "S101",   # Use of assert (for tests)
    "ANN201", # Missing return type annotation for public function
    "ANN001", # Missing type annotation for function argument
    "ANN202", # Missing return type annotation for private function
    "PLR2004", # Magic value used in comparison
    "INP001", # Implicit namespace package
    "ARG001", # Unused function argument (test helpers)
    "ARG002", # Unused method argument
    "ARG005", # Unused lambda argument
    "SLF001", # Private member accessed (testing private methods)
    "S105",   # Possible hardcoded password (test tokens)
    "S108",   # Probable insecure usage of temp file (tests)
    "S110",   # Try-except-pass (acceptable in tests for cleanup)
    "SIM117", # Use single with statement (readability preference in tests)
    "SIM105", # Use contextlib.suppress (try-except is clearer in tests)
    "DTZ001", # datetime() without tzinfo (tests don't need timezone)
    "DTZ005", # datetime.now() without tz (tests don't need timezone)
    "F841",   # Local variable assigned but never used (test fixtures)
    "D200",   # One-line docstring should fit on one line (test readability)
    "D400",   # First line should end with a period (test docstrings)
    "D415",   # First line should end with punctuation (test docstrings)
    "PTH108", # os.unlink() should be replaced by Path.unlink() (compatibility)
    "PTH110", # os.path.exists() should be replaced by Path.exists() (compatibility)
    "PTH109", # os.getcwd() should be replaced by Path.cwd() (compatibility)
    "PLC0415", # import should be at top-level (test fixtures can import locally)
    "PT022",  # No teardown in fixture (yield style fixtures are fine)
    "PT011",  # pytest.raises too broad (simple exception testing)
    "B017",   # pytest.raises(Exception) (simple exception testing)
    "E722",   # Bare except (acceptable in test cleanup/mocking)
]
"src/**" = [
    "FBT001", # Boolean positional argument in function definition (common pattern)
    "FBT002", # Boolean default positional argument (common pattern)
    "DTZ005", # datetime.now() without tz (monitoring timestamps)
    "DTZ901", # datetime.min without timezone (default/sentinel values)
    "EM101",  # Exception must not use string literal (simple error messages)
    "TRY003", # Long exception messages (descriptive error messages)
    "ARG001", # Unused function arguments (interfaces/future extensibility)
    "ARG002", # Unused method argument (web handlers)
    "ANN001", # Missing type annotation for function argument (gradual typing)
    "ANN003", # Missing type annotation for **kwargs (flexibility)
    "ANN201", # Missing return type annotation for public function (gradual typing)
    "PLR2004", # Magic value used in comparison (configuration values)
    "PLR0913", # Too many arguments (complex functions)
    "PLW0603", # Using global statement (monitoring singleton pattern)
    "PLW0602", # Using global without assignment (monitoring singleton pattern)
    "S104",   # Possible binding to all interfaces (monitoring server)
    "EXE001", # Shebang present but file not executable (entry point script)
    "D200",   # One-line docstring should fit on one line (readability preference)
    "D205",   # 1 blank line required between summary and description (docstring style)
    "D400",   # First line should end with a period (docstring style)
    "D401",   # First line should be imperative mood (API docstrings)
    "D415",   # First line should end with punctuation (docstring style)
    "BLE001", # Do not catch blind exception (error handling resilience)
    "SLF001", # Private member accessed (tool integration)
    "F841",   # Local variable assigned but never used (intermediate values)
    "C416",   # Unnecessary list comprehension (readability)
    "B007",   # Loop control variable not used within loop body (enumerate patterns)
    "B904",   # Within except clause, raise with from err (error chaining style)
    "ANN204", # Missing return type annotation for special method (dunder methods)
    "ANN401", # Dynamically typed expressions (typing.Any) (flexibility needed)
    "E501",   # Line too long (HTML template strings)
    "W293",   # Blank line contains whitespace (formatting in templates)
    "S301",   # pickle can be unsafe (controlled environment)
    "TRY300", # Consider moving to else block (error handling style)
    "D106",   # Missing docstring in public nested class (Config classes)
    "D107",   # Missing docstring in __init__ (simple constructors)
    "EM102",  # Exception must not use f-string literal (error message style)
    "PTH123", # open() should be replaced by Path.open() (compatibility)
    "PTH108", # os.unlink() should be replaced by Path.unlink() (compatibility)
    "SIM102", # Use single if statement (readability preference)
    "F821",   # Undefined name (type annotations in quotes)
    "S607",   # Starting process with partial executable path (CLI tools)
    "RUF013", # PEP 484 prohibits implicit Optional (legacy typing style)
    "TRY301", # Abstract raise to inner function (inline error handling)
    "TRY002", # Create your own exception (simple error cases)
    "PLW2901", # For loop variable overwritten (processing pattern)
    "PIE810", # Call startswith once with tuple (readability)
    "RET504", # Unnecessary assignment before return (clarity)
]

# Allow fix for all enabled rules (when `--fix`) is provided
fixable = ["ALL"]
unfixable = []

[tool.ruff.format]
# Like Black, use double quotes for strings
quote-style = "double"

# Like Black, indent with spaces, rather than tabs
indent-style = "space"

# Like Black, respect magic trailing commas
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["src"]

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.mypy]
python_version = "3.13"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = false
disallow_untyped_decorators = false
no_implicit_optional = false
warn_redundant_casts = true
warn_unused_ignores = false
warn_no_return = true
warn_unreachable = true
strict_equality = false
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
branch = true
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection for tests

[tool.vulture]
min_confidence = 80
paths = ["src", "tests"]