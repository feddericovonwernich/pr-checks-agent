name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  # Code Quality and Linting
  code-quality:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install ruff bandit safety semgrep
    
    - name: Lint with Ruff (fast Python linter)
      run: |
        ruff check src/ tests/ --output-format=github
    
    - name: Format check with Ruff
      run: |
        ruff format --check src/ tests/
    
    - name: Type check with mypy
      run: |
        mypy src/ --ignore-missing-imports --strict-optional
    
    - name: Code complexity check with radon
      run: |
        pip install radon
        radon cc src/ -s --total-average
        radon mi src/ -s

  # Security Scanning
  security:
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety semgrep pip-audit
    
    - name: Security audit with Bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json || true
        bandit -r src/ -f txt
      continue-on-error: true
    
    - name: Upload Bandit results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: bandit-report.json
      continue-on-error: true
    
    - name: Check dependencies with Safety
      run: |
        safety check --json --output safety-report.json || true
        safety check
      continue-on-error: true
    
    - name: Audit Python packages with pip-audit
      run: |
        pip-audit --desc --output=json --output-file pip-audit-report.json || true
        pip-audit --desc
      continue-on-error: true
    
    - name: Semgrep security analysis
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/python
      continue-on-error: true
    
    - name: Upload security reports as artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
          pip-audit-report.json

  # Vulnerability Scanning
  vulnerability-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run Trivy in table format
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'

  # Main Test Suite
  test:
    runs-on: ubuntu-latest
    needs: [code-quality]  # Run tests only if code quality passes
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Create logs directory
      run: mkdir -p logs

    - name: Run comprehensive test suite
      env:
        REDIS_URL: redis://localhost:6379/0
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=45

    # - name: Upload coverage reports
    #   uses: codecov/codecov-action@v3
    #   if: always()
    #   with:
    #     file: ./coverage.xml
    #     flags: unittests
    #     name: codecov-umbrella
    #     fail_ci_if_error: true

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          htmlcov/
          coverage.xml

  # License and Dependency Analysis
  dependency-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pipdeptree pip-licenses
    
    - name: Generate dependency tree
      run: |
        pipdeptree --warn silence > dependency-tree.txt
        cat dependency-tree.txt
    
    - name: Check licenses
      run: |
        pip-licenses --format=json --output-file=licenses.json
        pip-licenses --format=markdown --output-file=licenses.md
        pip-licenses
    
    - name: Upload dependency reports
      uses: actions/upload-artifact@v4
      with:
        name: dependency-reports
        path: |
          dependency-tree.txt
          licenses.json
          licenses.md

  # Performance and Code Metrics
  metrics:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13'
    
    - name: Install metrics tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install radon xenon vulture pytest-benchmark
    
    - name: Code complexity analysis
      run: |
        echo "=== Cyclomatic Complexity ===" 
        radon cc src/ -s --total-average --json > complexity.json
        radon cc src/ -s --total-average
        
        echo "=== Maintainability Index ==="
        radon mi src/ -s --json > maintainability.json
        radon mi src/ -s
    
    - name: Dead code analysis with vulture
      run: |
        vulture src/ tests/ --min-confidence 80 --sort-by-size > dead-code-report.txt || true
        cat dead-code-report.txt
      continue-on-error: true
    
    - name: Upload metrics reports
      uses: actions/upload-artifact@v4
      with:
        name: metrics-reports
        path: |
          complexity.json
          maintainability.json
          dead-code-report.txt

  # Final Status Check
  ci-success:
    runs-on: ubuntu-latest
    needs: [code-quality, security, vulnerability-scan, test, dependency-analysis, metrics]
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Security: ${{ needs.security.result }}"
        echo "Vulnerability Scan: ${{ needs.vulnerability-scan.result }}"
        echo "Tests: ${{ needs.test.result }}"
        echo "Dependency Analysis: ${{ needs.dependency-analysis.result }}"
        echo "Metrics: ${{ needs.metrics.result }}"
        
        if [[ "${{ needs.test.result }}" != "success" ]]; then
          echo "❌ Tests failed - blocking CI"
          exit 1
        fi
        
        if [[ "${{ needs.code-quality.result }}" != "success" ]]; then
          echo "❌ Code quality checks failed - blocking CI"
          exit 1
        fi
        
        echo "✅ All critical checks passed!"